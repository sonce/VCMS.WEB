diff --git a/node_modules/postmate/README.md b/node_modules/postmate/README.md
index 63eafd0..52b82b7 100644
--- a/node_modules/postmate/README.md
+++ b/node_modules/postmate/README.md
@@ -25,6 +25,34 @@ You can download the compiled javascript directly [here](/build/postmate.min.js)
 
 ***
 
+## Changes
+
+* Get method can pass parameters
+
+**Child Model Method**
+```javascript
+Test(arg1,arg2){
+  return arg1+arg2
+}
+```
+
+**Parent How to call**
+```javascript
+new Postmate({
+                iframeOrSelector: "#" + designConfig.iframeId,
+                url: null
+            }).then((client: Postmate.ParentAPI) => {
+                return client.get('Test',1,2)
+            })
+```
+* Support exist iframe
+```javascript
+new Postmate({
+                iframeOrSelector: "#" + designConfig.iframeId,
+                url: null
+            })
+```
+
 ## Features
 
 [![Greenkeeper badge](https://badges.greenkeeper.io/dollarshaveclub/postmate.svg)](https://greenkeeper.io/)
@@ -34,7 +62,7 @@ You can download the compiled javascript directly [here](/build/postmate.min.js)
 * Child emits events that the parent can listen to.
 * Parent can `call` functions within a `child`
 * *Zero* dependencies. Provide your own polyfill or abstraction for the `Promise` API if needed.
-* Lightweight, weighing in at ~ <span class="size">`1.6kb`</span> (minified & gzipped).
+* Lightweight, weighing in at ~ <span class="size">`1.7kb`</span> (minified & gzipped).
 
 NOTE: While the underlying mechanism is [window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage), only iFrame is supported.
 
@@ -69,7 +97,7 @@ $ npm i postmate --save # Install via NPM
 // Kick off the handshake with the iFrame
 const handshake = new Postmate({
   container: document.getElementById('some-div'), // Element to inject frame into
-  url: 'http://child.com/page.html' // Page to load, must have postmate.js. This will also be the origin used for communication.
+  url: 'http://child.com/page.html', // Page to load, must have postmate.js. This will also be the origin used for communication.
   name: 'my-iframe-name', // Set Iframe name attribute. Useful to get `window.name` in the child.
   classListArray: ["myClass"] //Classes to add to the iframe via classList, useful for styling.
 });
diff --git a/node_modules/postmate/build/postmate.dev.js b/node_modules/postmate/build/postmate.dev.js
index 2c85550..6f7ba05 100644
--- a/node_modules/postmate/build/postmate.dev.js
+++ b/node_modules/postmate/build/postmate.dev.js
@@ -1,6 +1,6 @@
 /**
   postmate - A powerful, simple, promise-based postMessage library
-  @version v1.5.2
+  @version v1.6.1
   @link https://github.com/dollarshaveclub/postmate
   @author Jacob Kelley <jakie8@gmail.com>
   @license MIT
@@ -9,7 +9,7 @@
   typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
   typeof define === 'function' && define.amd ? define(factory) :
   (global = global || self, global.Postmate = factory());
-}(this, function () { 'use strict';
+}(this, (function () { 'use strict';
 
   /**
    * The type of messages our frames our sending
@@ -67,14 +67,14 @@
     emit: 1,
     reply: 1,
     request: 1
-    /**
-     * Ensures that a message is safe to interpret
-     * @param  {Object} message The postmate message being sent
-     * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
-     * @return {Boolean}
-     */
-
   };
+  /**
+   * Ensures that a message is safe to interpret
+   * @param  {Object} message The postmate message being sent
+   * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
+   * @return {Boolean}
+   */
+
   var sanitize = function sanitize(message, allowedOrigin) {
     if (typeof allowedOrigin === 'string' && message.origin !== allowedOrigin) return false;
     if (!message.data) return false;
@@ -92,8 +92,8 @@
    * @return {Promise}
    */
 
-  var resolveValue = function resolveValue(model, property) {
-    var unwrappedContext = typeof model[property] === 'function' ? model[property]() : model[property];
+  var resolveValue = function resolveValue(model, property, data) {
+    var unwrappedContext = typeof model[property] === 'function' ? model[property].apply(model, data) : model[property];
     return Postmate.Promise.resolve(unwrappedContext);
   };
   /**
@@ -101,9 +101,7 @@
    * @param {Object} info Information on the consumer
    */
 
-  var ParentAPI =
-  /*#__PURE__*/
-  function () {
+  var ParentAPI = /*#__PURE__*/function () {
     function ParentAPI(info) {
       var _this = this;
 
@@ -111,6 +109,7 @@
       this.frame = info.frame;
       this.child = info.child;
       this.childOrigin = info.childOrigin;
+      this.createIframeByMe = info.createIframeByMe;
       this.events = {};
 
       {
@@ -134,7 +133,9 @@
           }
 
           if (name in _this.events) {
-            _this.events[name].call(_this, data);
+            _this.events[name].forEach(function (callback) {
+              callback.call(_this, data);
+            });
           }
         }
       };
@@ -148,7 +149,7 @@
 
     var _proto = ParentAPI.prototype;
 
-    _proto.get = function get(property) {
+    _proto.get = function get(property, data) {
       var _this2 = this;
 
       return new Postmate.Promise(function (resolve) {
@@ -171,7 +172,8 @@
           postmate: 'request',
           type: messageType,
           property: property,
-          uid: uid
+          uid: uid,
+          data: data
         }, _this2.childOrigin);
       });
     };
@@ -187,7 +189,11 @@
     };
 
     _proto.on = function on(eventName, callback) {
-      this.events[eventName] = callback;
+      if (!this.events[eventName]) {
+        this.events[eventName] = [];
+      }
+
+      this.events[eventName].push(callback);
     };
 
     _proto.destroy = function destroy() {
@@ -196,7 +202,7 @@
       }
 
       window.removeEventListener('message', this.listener, false);
-      this.frame.parentNode.removeChild(this.frame);
+      if (this.createIframeByMe) this.frame.parentNode.removeChild(this.frame);
     };
 
     return ParentAPI;
@@ -206,9 +212,7 @@
    * @param {Object} info Information on the consumer
    */
 
-  var ChildAPI =
-  /*#__PURE__*/
-  function () {
+  var ChildAPI = /*#__PURE__*/function () {
     function ChildAPI(info) {
       var _this3 = this;
 
@@ -236,14 +240,15 @@
 
         if (e.data.postmate === 'call') {
           if (property in _this3.model && typeof _this3.model[property] === 'function') {
-            _this3.model[property](data);
+            // this.model[property](data)
+            _this3.model[property].apply(_this3, data);
           }
 
           return;
         } // Reply to Parent
 
 
-        resolveValue(_this3.model, property).then(function (value) {
+        resolveValue(_this3.model, property, data).then(function (value) {
           return e.source.postMessage({
             property: property,
             postmate: 'reply',
@@ -279,9 +284,7 @@
    * @type {Class}
    */
 
-  var Postmate =
-  /*#__PURE__*/
-  function () {
+  var Postmate = /*#__PURE__*/function () {
     // eslint-disable-line no-undef
     // Internet Explorer craps itself
 
@@ -297,13 +300,22 @@
           url = _ref2.url,
           name = _ref2.name,
           _ref2$classListArray = _ref2.classListArray,
-          classListArray = _ref2$classListArray === void 0 ? [] : _ref2$classListArray;
+          classListArray = _ref2$classListArray === void 0 ? [] : _ref2$classListArray,
+          _ref2$iframeOrSelecto = _ref2.iframeOrSelector,
+          iframeOrSelector = _ref2$iframeOrSelecto === void 0 ? undefined : _ref2$iframeOrSelecto;
       // eslint-disable-line no-undef
       this.parent = window;
-      this.frame = document.createElement('iframe');
+
+      if (iframeOrSelector) {
+        if (typeof iframeOrSelector === 'string') this.frame = document.querySelector(iframeOrSelector);else this.frame = iframeOrSelector;
+      } else {
+        this.frame = document.createElement('iframe');
+        this.createIframeByMe = true;
+      }
+
       this.frame.name = name || '';
       this.frame.classList.add.apply(this.frame.classList, classListArray);
-      container.appendChild(this.frame);
+      if (this.createIframeByMe) container.appendChild(this.frame);
       this.child = this.frame.contentWindow || this.frame.contentDocument.parentWindow;
       this.model = model || {};
       return this.sendHandshake(url);
@@ -320,7 +332,7 @@
     _proto3.sendHandshake = function sendHandshake(url) {
       var _this4 = this;
 
-      var childOrigin = resolveOrigin(url);
+      var childOrigin = "";
       var attempt = 0;
       var responseInterval;
       return new Postmate.Promise(function (resolve, reject) {
@@ -359,6 +371,10 @@
         var doSend = function doSend() {
           attempt++;
 
+          if (attempt > maxHandshakeRequests) {
+            clearInterval(responseInterval);
+          }
+
           {
             log("Parent: Sending handshake attempt " + attempt, {
               childOrigin: childOrigin
@@ -370,13 +386,12 @@
             type: messageType,
             model: _this4.model
           }, childOrigin);
-
-          if (attempt === maxHandshakeRequests) {
-            clearInterval(responseInterval);
-          }
         };
 
         var loaded = function loaded() {
+          // reset attempt to zero,and resolve origin
+          attempt = 0;
+          childOrigin = resolveOrigin(url ? url : _this4.frame.src);
           doSend();
           responseInterval = setInterval(doSend, 500);
         };
@@ -384,7 +399,7 @@
         if (_this4.frame.attachEvent) {
           _this4.frame.attachEvent('onload', loaded);
         } else {
-          _this4.frame.onload = loaded;
+          _this4.frame.addEventListener('load', loaded);
         }
 
         {
@@ -393,7 +408,7 @@
           });
         }
 
-        _this4.frame.src = url;
+        if (url) _this4.frame.src = url;else loaded();
       });
     };
 
@@ -415,9 +430,7 @@
     }
   }();
 
-  Postmate.Model =
-  /*#__PURE__*/
-  function () {
+  Postmate.Model = /*#__PURE__*/function () {
     /**
      * Initializes the child, model, parent, and responds to the Parents handshake
      * @param {Object} model Hash of values, functions, or promises
@@ -494,4 +507,4 @@
 
   return Postmate;
 
-}));
+})));
diff --git a/node_modules/postmate/build/postmate.es.js b/node_modules/postmate/build/postmate.es.js
index 29e3c76..0fc084d 100644
--- a/node_modules/postmate/build/postmate.es.js
+++ b/node_modules/postmate/build/postmate.es.js
@@ -1,6 +1,6 @@
 /**
   postmate - A powerful, simple, promise-based postMessage library
-  @version v1.5.2
+  @version v1.6.1
   @link https://github.com/dollarshaveclub/postmate
   @author Jacob Kelley <jakie8@gmail.com>
   @license MIT
@@ -61,14 +61,14 @@ var messageTypes = {
   emit: 1,
   reply: 1,
   request: 1
-  /**
-   * Ensures that a message is safe to interpret
-   * @param  {Object} message The postmate message being sent
-   * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
-   * @return {Boolean}
-   */
-
 };
+/**
+ * Ensures that a message is safe to interpret
+ * @param  {Object} message The postmate message being sent
+ * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
+ * @return {Boolean}
+ */
+
 var sanitize = function sanitize(message, allowedOrigin) {
   if (typeof allowedOrigin === 'string' && message.origin !== allowedOrigin) return false;
   if (!message.data) return false;
@@ -86,8 +86,8 @@ var sanitize = function sanitize(message, allowedOrigin) {
  * @return {Promise}
  */
 
-var resolveValue = function resolveValue(model, property) {
-  var unwrappedContext = typeof model[property] === 'function' ? model[property]() : model[property];
+var resolveValue = function resolveValue(model, property, data) {
+  var unwrappedContext = typeof model[property] === 'function' ? model[property].apply(model, data) : model[property];
   return Postmate.Promise.resolve(unwrappedContext);
 };
 /**
@@ -95,9 +95,7 @@ var resolveValue = function resolveValue(model, property) {
  * @param {Object} info Information on the consumer
  */
 
-var ParentAPI =
-/*#__PURE__*/
-function () {
+var ParentAPI = /*#__PURE__*/function () {
   function ParentAPI(info) {
     var _this = this;
 
@@ -105,6 +103,7 @@ function () {
     this.frame = info.frame;
     this.child = info.child;
     this.childOrigin = info.childOrigin;
+    this.createIframeByMe = info.createIframeByMe;
     this.events = {};
 
     if (process.env.NODE_ENV !== 'production') {
@@ -128,7 +127,9 @@ function () {
         }
 
         if (name in _this.events) {
-          _this.events[name].call(_this, data);
+          _this.events[name].forEach(function (callback) {
+            callback.call(_this, data);
+          });
         }
       }
     };
@@ -142,7 +143,7 @@ function () {
 
   var _proto = ParentAPI.prototype;
 
-  _proto.get = function get(property) {
+  _proto.get = function get(property, data) {
     var _this2 = this;
 
     return new Postmate.Promise(function (resolve) {
@@ -165,7 +166,8 @@ function () {
         postmate: 'request',
         type: messageType,
         property: property,
-        uid: uid
+        uid: uid,
+        data: data
       }, _this2.childOrigin);
     });
   };
@@ -181,7 +183,11 @@ function () {
   };
 
   _proto.on = function on(eventName, callback) {
-    this.events[eventName] = callback;
+    if (!this.events[eventName]) {
+      this.events[eventName] = [];
+    }
+
+    this.events[eventName].push(callback);
   };
 
   _proto.destroy = function destroy() {
@@ -190,7 +196,7 @@ function () {
     }
 
     window.removeEventListener('message', this.listener, false);
-    this.frame.parentNode.removeChild(this.frame);
+    if (this.createIframeByMe) this.frame.parentNode.removeChild(this.frame);
   };
 
   return ParentAPI;
@@ -200,9 +206,7 @@ function () {
  * @param {Object} info Information on the consumer
  */
 
-var ChildAPI =
-/*#__PURE__*/
-function () {
+var ChildAPI = /*#__PURE__*/function () {
   function ChildAPI(info) {
     var _this3 = this;
 
@@ -230,14 +234,15 @@ function () {
 
       if (e.data.postmate === 'call') {
         if (property in _this3.model && typeof _this3.model[property] === 'function') {
-          _this3.model[property](data);
+          // this.model[property](data)
+          _this3.model[property].apply(_this3, data);
         }
 
         return;
       } // Reply to Parent
 
 
-      resolveValue(_this3.model, property).then(function (value) {
+      resolveValue(_this3.model, property, data).then(function (value) {
         return e.source.postMessage({
           property: property,
           postmate: 'reply',
@@ -273,9 +278,7 @@ function () {
  * @type {Class}
  */
 
-var Postmate =
-/*#__PURE__*/
-function () {
+var Postmate = /*#__PURE__*/function () {
   // eslint-disable-line no-undef
   // Internet Explorer craps itself
 
@@ -291,13 +294,22 @@ function () {
         url = _ref2.url,
         name = _ref2.name,
         _ref2$classListArray = _ref2.classListArray,
-        classListArray = _ref2$classListArray === void 0 ? [] : _ref2$classListArray;
+        classListArray = _ref2$classListArray === void 0 ? [] : _ref2$classListArray,
+        _ref2$iframeOrSelecto = _ref2.iframeOrSelector,
+        iframeOrSelector = _ref2$iframeOrSelecto === void 0 ? undefined : _ref2$iframeOrSelecto;
     // eslint-disable-line no-undef
     this.parent = window;
-    this.frame = document.createElement('iframe');
+
+    if (iframeOrSelector) {
+      if (typeof iframeOrSelector === 'string') this.frame = document.querySelector(iframeOrSelector);else this.frame = iframeOrSelector;
+    } else {
+      this.frame = document.createElement('iframe');
+      this.createIframeByMe = true;
+    }
+
     this.frame.name = name || '';
     this.frame.classList.add.apply(this.frame.classList, classListArray);
-    container.appendChild(this.frame);
+    if (this.createIframeByMe) container.appendChild(this.frame);
     this.child = this.frame.contentWindow || this.frame.contentDocument.parentWindow;
     this.model = model || {};
     return this.sendHandshake(url);
@@ -314,7 +326,7 @@ function () {
   _proto3.sendHandshake = function sendHandshake(url) {
     var _this4 = this;
 
-    var childOrigin = resolveOrigin(url);
+    var childOrigin = "";
     var attempt = 0;
     var responseInterval;
     return new Postmate.Promise(function (resolve, reject) {
@@ -353,6 +365,10 @@ function () {
       var doSend = function doSend() {
         attempt++;
 
+        if (attempt > maxHandshakeRequests) {
+          clearInterval(responseInterval);
+        }
+
         if (process.env.NODE_ENV !== 'production') {
           log("Parent: Sending handshake attempt " + attempt, {
             childOrigin: childOrigin
@@ -364,13 +380,12 @@ function () {
           type: messageType,
           model: _this4.model
         }, childOrigin);
-
-        if (attempt === maxHandshakeRequests) {
-          clearInterval(responseInterval);
-        }
       };
 
       var loaded = function loaded() {
+        // reset attempt to zero,and resolve origin
+        attempt = 0;
+        childOrigin = resolveOrigin(url ? url : _this4.frame.src);
         doSend();
         responseInterval = setInterval(doSend, 500);
       };
@@ -378,7 +393,7 @@ function () {
       if (_this4.frame.attachEvent) {
         _this4.frame.attachEvent('onload', loaded);
       } else {
-        _this4.frame.onload = loaded;
+        _this4.frame.addEventListener('load', loaded);
       }
 
       if (process.env.NODE_ENV !== 'production') {
@@ -387,7 +402,7 @@ function () {
         });
       }
 
-      _this4.frame.src = url;
+      if (url) _this4.frame.src = url;else loaded();
     });
   };
 
@@ -409,9 +424,7 @@ Postmate.Promise = function () {
   }
 }();
 
-Postmate.Model =
-/*#__PURE__*/
-function () {
+Postmate.Model = /*#__PURE__*/function () {
   /**
    * Initializes the child, model, parent, and responds to the Parents handshake
    * @param {Object} model Hash of values, functions, or promises
diff --git a/node_modules/postmate/build/postmate.js b/node_modules/postmate/build/postmate.js
index a1355b5..7ebab14 100644
--- a/node_modules/postmate/build/postmate.js
+++ b/node_modules/postmate/build/postmate.js
@@ -1,6 +1,6 @@
 /**
   postmate - A powerful, simple, promise-based postMessage library
-  @version v1.5.2
+  @version v1.6.1
   @link https://github.com/dollarshaveclub/postmate
   @author Jacob Kelley <jakie8@gmail.com>
   @license MIT
@@ -63,14 +63,14 @@ var messageTypes = {
   emit: 1,
   reply: 1,
   request: 1
-  /**
-   * Ensures that a message is safe to interpret
-   * @param  {Object} message The postmate message being sent
-   * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
-   * @return {Boolean}
-   */
-
 };
+/**
+ * Ensures that a message is safe to interpret
+ * @param  {Object} message The postmate message being sent
+ * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
+ * @return {Boolean}
+ */
+
 var sanitize = function sanitize(message, allowedOrigin) {
   if (typeof allowedOrigin === 'string' && message.origin !== allowedOrigin) return false;
   if (!message.data) return false;
@@ -88,8 +88,8 @@ var sanitize = function sanitize(message, allowedOrigin) {
  * @return {Promise}
  */
 
-var resolveValue = function resolveValue(model, property) {
-  var unwrappedContext = typeof model[property] === 'function' ? model[property]() : model[property];
+var resolveValue = function resolveValue(model, property, data) {
+  var unwrappedContext = typeof model[property] === 'function' ? model[property].apply(model, data) : model[property];
   return Postmate.Promise.resolve(unwrappedContext);
 };
 /**
@@ -97,9 +97,7 @@ var resolveValue = function resolveValue(model, property) {
  * @param {Object} info Information on the consumer
  */
 
-var ParentAPI =
-/*#__PURE__*/
-function () {
+var ParentAPI = /*#__PURE__*/function () {
   function ParentAPI(info) {
     var _this = this;
 
@@ -107,6 +105,7 @@ function () {
     this.frame = info.frame;
     this.child = info.child;
     this.childOrigin = info.childOrigin;
+    this.createIframeByMe = info.createIframeByMe;
     this.events = {};
 
     if (process.env.NODE_ENV !== 'production') {
@@ -130,7 +129,9 @@ function () {
         }
 
         if (name in _this.events) {
-          _this.events[name].call(_this, data);
+          _this.events[name].forEach(function (callback) {
+            callback.call(_this, data);
+          });
         }
       }
     };
@@ -144,7 +145,7 @@ function () {
 
   var _proto = ParentAPI.prototype;
 
-  _proto.get = function get(property) {
+  _proto.get = function get(property, data) {
     var _this2 = this;
 
     return new Postmate.Promise(function (resolve) {
@@ -167,7 +168,8 @@ function () {
         postmate: 'request',
         type: messageType,
         property: property,
-        uid: uid
+        uid: uid,
+        data: data
       }, _this2.childOrigin);
     });
   };
@@ -183,7 +185,11 @@ function () {
   };
 
   _proto.on = function on(eventName, callback) {
-    this.events[eventName] = callback;
+    if (!this.events[eventName]) {
+      this.events[eventName] = [];
+    }
+
+    this.events[eventName].push(callback);
   };
 
   _proto.destroy = function destroy() {
@@ -192,7 +198,7 @@ function () {
     }
 
     window.removeEventListener('message', this.listener, false);
-    this.frame.parentNode.removeChild(this.frame);
+    if (this.createIframeByMe) this.frame.parentNode.removeChild(this.frame);
   };
 
   return ParentAPI;
@@ -202,9 +208,7 @@ function () {
  * @param {Object} info Information on the consumer
  */
 
-var ChildAPI =
-/*#__PURE__*/
-function () {
+var ChildAPI = /*#__PURE__*/function () {
   function ChildAPI(info) {
     var _this3 = this;
 
@@ -232,14 +236,15 @@ function () {
 
       if (e.data.postmate === 'call') {
         if (property in _this3.model && typeof _this3.model[property] === 'function') {
-          _this3.model[property](data);
+          // this.model[property](data)
+          _this3.model[property].apply(_this3, data);
         }
 
         return;
       } // Reply to Parent
 
 
-      resolveValue(_this3.model, property).then(function (value) {
+      resolveValue(_this3.model, property, data).then(function (value) {
         return e.source.postMessage({
           property: property,
           postmate: 'reply',
@@ -275,9 +280,7 @@ function () {
  * @type {Class}
  */
 
-var Postmate =
-/*#__PURE__*/
-function () {
+var Postmate = /*#__PURE__*/function () {
   // eslint-disable-line no-undef
   // Internet Explorer craps itself
 
@@ -293,13 +296,22 @@ function () {
         url = _ref2.url,
         name = _ref2.name,
         _ref2$classListArray = _ref2.classListArray,
-        classListArray = _ref2$classListArray === void 0 ? [] : _ref2$classListArray;
+        classListArray = _ref2$classListArray === void 0 ? [] : _ref2$classListArray,
+        _ref2$iframeOrSelecto = _ref2.iframeOrSelector,
+        iframeOrSelector = _ref2$iframeOrSelecto === void 0 ? undefined : _ref2$iframeOrSelecto;
     // eslint-disable-line no-undef
     this.parent = window;
-    this.frame = document.createElement('iframe');
+
+    if (iframeOrSelector) {
+      if (typeof iframeOrSelector === 'string') this.frame = document.querySelector(iframeOrSelector);else this.frame = iframeOrSelector;
+    } else {
+      this.frame = document.createElement('iframe');
+      this.createIframeByMe = true;
+    }
+
     this.frame.name = name || '';
     this.frame.classList.add.apply(this.frame.classList, classListArray);
-    container.appendChild(this.frame);
+    if (this.createIframeByMe) container.appendChild(this.frame);
     this.child = this.frame.contentWindow || this.frame.contentDocument.parentWindow;
     this.model = model || {};
     return this.sendHandshake(url);
@@ -316,7 +328,7 @@ function () {
   _proto3.sendHandshake = function sendHandshake(url) {
     var _this4 = this;
 
-    var childOrigin = resolveOrigin(url);
+    var childOrigin = "";
     var attempt = 0;
     var responseInterval;
     return new Postmate.Promise(function (resolve, reject) {
@@ -355,6 +367,10 @@ function () {
       var doSend = function doSend() {
         attempt++;
 
+        if (attempt > maxHandshakeRequests) {
+          clearInterval(responseInterval);
+        }
+
         if (process.env.NODE_ENV !== 'production') {
           log("Parent: Sending handshake attempt " + attempt, {
             childOrigin: childOrigin
@@ -366,13 +382,12 @@ function () {
           type: messageType,
           model: _this4.model
         }, childOrigin);
-
-        if (attempt === maxHandshakeRequests) {
-          clearInterval(responseInterval);
-        }
       };
 
       var loaded = function loaded() {
+        // reset attempt to zero,and resolve origin
+        attempt = 0;
+        childOrigin = resolveOrigin(url ? url : _this4.frame.src);
         doSend();
         responseInterval = setInterval(doSend, 500);
       };
@@ -380,7 +395,7 @@ function () {
       if (_this4.frame.attachEvent) {
         _this4.frame.attachEvent('onload', loaded);
       } else {
-        _this4.frame.onload = loaded;
+        _this4.frame.addEventListener('load', loaded);
       }
 
       if (process.env.NODE_ENV !== 'production') {
@@ -389,7 +404,7 @@ function () {
         });
       }
 
-      _this4.frame.src = url;
+      if (url) _this4.frame.src = url;else loaded();
     });
   };
 
@@ -411,9 +426,7 @@ Postmate.Promise = function () {
   }
 }();
 
-Postmate.Model =
-/*#__PURE__*/
-function () {
+Postmate.Model = /*#__PURE__*/function () {
   /**
    * Initializes the child, model, parent, and responds to the Parents handshake
    * @param {Object} model Hash of values, functions, or promises
diff --git a/node_modules/postmate/build/postmate.min.js b/node_modules/postmate/build/postmate.min.js
index 160330b..7af05c5 100644
--- a/node_modules/postmate/build/postmate.min.js
+++ b/node_modules/postmate/build/postmate.min.js
@@ -1,8 +1,8 @@
 /**
   postmate - A powerful, simple, promise-based postMessage library
-  @version v1.5.2
+  @version v1.6.1
   @link https://github.com/dollarshaveclub/postmate
   @author Jacob Kelley <jakie8@gmail.com>
   @license MIT
 **/
-!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Postmate=t()}(this,function(){"use strict";var h="application/x-postmate-v1+json",r=0,n={handshake:1,"handshake-reply":1,call:1,emit:1,reply:1,request:1},p=function(e,t){return("string"!=typeof t||e.origin===t)&&(!!e.data&&(("object"!=typeof e.data||"postmate"in e.data)&&(e.data.type===h&&!!n[e.data.postmate])))},l=function(){function e(e){var a=this;this.parent=e.parent,this.frame=e.frame,this.child=e.child,this.childOrigin=e.childOrigin,this.events={},this.listener=function(e){if(!p(e,a.childOrigin))return!1;var t=((e||{}).data||{}).value||{},n=t.data,i=t.name;"emit"===e.data.postmate&&i in a.events&&a.events[i].call(a,n)},this.parent.addEventListener("message",this.listener,!1)}var t=e.prototype;return t.get=function(e){var a=this;return new c.Promise(function(n){var i=++r;a.parent.addEventListener("message",function e(t){t.data.uid===i&&"reply"===t.data.postmate&&(a.parent.removeEventListener("message",e,!1),n(t.data.value))},!1),a.child.postMessage({postmate:"request",type:h,property:e,uid:i},a.childOrigin)})},t.call=function(e,t){this.child.postMessage({postmate:"call",type:h,property:e,data:t},this.childOrigin)},t.on=function(e,t){this.events[e]=t},t.destroy=function(){window.removeEventListener("message",this.listener,!1),this.frame.parentNode.removeChild(this.frame)},e}(),o=function(){function e(e){var d=this;this.model=e.model,this.parent=e.parent,this.parentOrigin=e.parentOrigin,this.child=e.child,this.child.addEventListener("message",function(t){if(p(t,d.parentOrigin)){var e,n,i,a=t.data,r=a.property,o=a.uid,s=a.data;if("call"!==t.data.postmate)(e=d.model,n=r,i="function"==typeof e[n]?e[n]():e[n],c.Promise.resolve(i)).then(function(e){return t.source.postMessage({property:r,postmate:"reply",type:h,uid:o,value:e},t.origin)});else r in d.model&&"function"==typeof d.model[r]&&d.model[r](s)}})}return e.prototype.emit=function(e,t){this.parent.postMessage({postmate:"emit",type:h,value:{name:e,data:t}},this.parentOrigin)},e}(),c=function(){function e(e){var t=e.container,n=void 0===t?void 0!==n?n:document.body:t,i=e.model,a=e.url,r=e.name,o=e.classListArray,s=void 0===o?[]:o;return this.parent=window,this.frame=document.createElement("iframe"),this.frame.name=r||"",this.frame.classList.add.apply(this.frame.classList,s),n.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=i||{},this.sendHandshake(a)}return e.prototype.sendHandshake=function(a){var r,o=this,s=function(e){var t=document.createElement("a");t.href=e;var n=4<t.protocol.length?t.protocol:window.location.protocol,i=t.host.length?"80"===t.port||"443"===t.port?t.hostname:t.host:window.location.host;return t.origin||n+"//"+i}(a),d=0;return new e.Promise(function(n,i){o.parent.addEventListener("message",function e(t){return!!p(t,s)&&("handshake-reply"===t.data.postmate?(clearInterval(r),o.parent.removeEventListener("message",e,!1),o.childOrigin=t.origin,n(new l(o))):i("Failed handshake"))},!1);var e=function(){d++,o.child.postMessage({postmate:"handshake",type:h,model:o.model},s),5===d&&clearInterval(r)},t=function(){e(),r=setInterval(e,500)};o.frame.attachEvent?o.frame.attachEvent("onload",t):o.frame.onload=t,o.frame.src=a})},e}();return c.debug=!1,c.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),c.Model=function(){function e(e){return this.child=window,this.model=e,this.parent=this.child.parent,this.sendHandshakeReply()}return e.prototype.sendHandshakeReply=function(){var r=this;return new c.Promise(function(i,a){r.child.addEventListener("message",function e(t){if(t.data.postmate){if("handshake"!==t.data.postmate)return a("Handshake Reply Failed");r.child.removeEventListener("message",e,!1),t.source.postMessage({postmate:"handshake-reply",type:h},t.origin),r.parentOrigin=t.origin;var n=t.data.model;return n&&Object.keys(n).forEach(function(e){r.model[e]=n[e]}),i(new o(r))}},!1)})},e}(),c});
+!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Postmate=t()}(this,function(){"use strict";function c(e,t){return("string"!=typeof t||e.origin===t)&&(!!e.data&&(("object"!=typeof e.data||"postmate"in e.data)&&(e.data.type===p&&!!n[e.data.postmate])))}var p="application/x-postmate-v1+json",r=0,n={handshake:1,"handshake-reply":1,call:1,emit:1,reply:1,request:1},h=function(){function e(e){var i=this;this.parent=e.parent,this.frame=e.frame,this.child=e.child,this.childOrigin=e.childOrigin,this.createIframeByMe=e.createIframeByMe,this.events={},this.listener=function(e){if(!c(e,i.childOrigin))return!1;var t=((e||{}).data||{}).value||{},n=t.data,a=t.name;"emit"===e.data.postmate&&a in i.events&&i.events[a].forEach(function(e){e.call(i,n)})},this.parent.addEventListener("message",this.listener,!1)}var t=e.prototype;return t.get=function(e,t){var i=this;return new l.Promise(function(n){var a=++r;i.parent.addEventListener("message",function e(t){t.data.uid===a&&"reply"===t.data.postmate&&(i.parent.removeEventListener("message",e,!1),n(t.data.value))},!1),i.child.postMessage({postmate:"request",type:p,property:e,uid:a,data:t},i.childOrigin)})},t.call=function(e,t){this.child.postMessage({postmate:"call",type:p,property:e,data:t},this.childOrigin)},t.on=function(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)},t.destroy=function(){window.removeEventListener("message",this.listener,!1),this.createIframeByMe&&this.frame.parentNode.removeChild(this.frame)},e}(),s=function(){function e(e){var h=this;this.model=e.model,this.parent=e.parent,this.parentOrigin=e.parentOrigin,this.child=e.child,this.child.addEventListener("message",function(t){if(c(t,h.parentOrigin)){var e,n,a,i,r=t.data,s=r.property,o=r.uid,d=r.data;if("call"!==t.data.postmate)e=h.model,a=d,i="function"==typeof e[n=s]?e[n].apply(e,a):e[n],l.Promise.resolve(i).then(function(e){return t.source.postMessage({property:s,postmate:"reply",type:p,uid:o,value:e},t.origin)});else s in h.model&&"function"==typeof h.model[s]&&h.model[s].apply(h,d)}})}return e.prototype.emit=function(e,t){this.parent.postMessage({postmate:"emit",type:p,value:{name:e,data:t}},this.parentOrigin)},e}(),l=function(){function e(e){var t=e.container,n=void 0===t?void 0!==n?n:document.body:t,a=e.model,i=e.url,r=e.name,s=e.classListArray,o=void 0===s?[]:s,d=e.iframeOrSelector,h=void 0===d?void 0:d;return this.parent=window,h?this.frame="string"==typeof h?document.querySelector(h):h:(this.frame=document.createElement("iframe"),this.createIframeByMe=!0),this.frame.name=r||"",this.frame.classList.add.apply(this.frame.classList,o),this.createIframeByMe&&n.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=a||{},this.sendHandshake(i)}return e.prototype.sendHandshake=function(i){var r,s=this,o="",d=0;return new e.Promise(function(n,a){s.parent.addEventListener("message",function e(t){return!!c(t,o)&&("handshake-reply"===t.data.postmate?(clearInterval(r),s.parent.removeEventListener("message",e,!1),s.childOrigin=t.origin,n(new h(s))):a("Failed handshake"))},!1);function e(){5<++d&&clearInterval(r),s.child.postMessage({postmate:"handshake",type:p,model:s.model},o)}function t(){d=0,o=function(e){var t=document.createElement("a");t.href=e;var n=4<t.protocol.length?t.protocol:window.location.protocol,a=t.host.length?"80"===t.port||"443"===t.port?t.hostname:t.host:window.location.host;return t.origin||n+"//"+a}(i||s.frame.src),e(),r=setInterval(e,500)}s.frame.attachEvent?s.frame.attachEvent("onload",t):s.frame.addEventListener("load",t),i?s.frame.src=i:t()})},e}();return l.debug=!1,l.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),l.Model=function(){function e(e){return this.child=window,this.model=e,this.parent=this.child.parent,this.sendHandshakeReply()}return e.prototype.sendHandshakeReply=function(){var r=this;return new l.Promise(function(a,i){r.child.addEventListener("message",function e(t){if(t.data.postmate){if("handshake"!==t.data.postmate)return i("Handshake Reply Failed");r.child.removeEventListener("message",e,!1),t.source.postMessage({postmate:"handshake-reply",type:p},t.origin),r.parentOrigin=t.origin;var n=t.data.model;return n&&Object.keys(n).forEach(function(e){r.model[e]=n[e]}),a(new s(r))}},!1)})},e}(),l});
diff --git a/node_modules/postmate/src/postmate.js b/node_modules/postmate/src/postmate.js
index e87d187..90ca9d4 100644
--- a/node_modules/postmate/src/postmate.js
+++ b/node_modules/postmate/src/postmate.js
@@ -80,9 +80,9 @@ export const sanitize = (message, allowedOrigin) => {
  *                            passed to functions in the child model
  * @return {Promise}
  */
-export const resolveValue = (model, property) => {
+export const resolveValue = (model, property, data) => {
   const unwrappedContext = typeof model[property] === 'function'
-    ? model[property]() : model[property]
+    ? model[property].apply(model, data) : model[property]
   return Postmate.Promise.resolve(unwrappedContext)
 }
 
@@ -91,11 +91,12 @@ export const resolveValue = (model, property) => {
  * @param {Object} info Information on the consumer
  */
 export class ParentAPI {
-  constructor (info) {
+  constructor(info) {
     this.parent = info.parent
     this.frame = info.frame
     this.child = info.child
     this.childOrigin = info.childOrigin
+    this.createIframeByMe = info.createIframeByMe
 
     this.events = {}
 
@@ -117,7 +118,9 @@ export class ParentAPI {
           log(`Parent: Received event emission: ${name}`)
         }
         if (name in this.events) {
-          this.events[name].call(this, data)
+          this.events[name].forEach(callback => {
+            callback.call(this, data)
+          })
         }
       }
     }
@@ -128,7 +131,7 @@ export class ParentAPI {
     }
   }
 
-  get (property) {
+  get(property, data) {
     return new Postmate.Promise((resolve) => {
       // Extract data from response and kill listeners
       const uid = generateNewMessageId()
@@ -148,11 +151,12 @@ export class ParentAPI {
         type: messageType,
         property,
         uid,
+        data
       }, this.childOrigin)
     })
   }
 
-  call (property, data) {
+  call(property, data) {
     // Send information to the child
     this.child.postMessage({
       postmate: 'call',
@@ -162,25 +166,30 @@ export class ParentAPI {
     }, this.childOrigin)
   }
 
-  on (eventName, callback) {
-    this.events[eventName] = callback
+  on(eventName, callback) {
+    if (!this.events[eventName]) {
+      this.events[eventName] = []
+    }
+    this.events[eventName].push(callback)
   }
 
-  destroy () {
+  destroy() {
     if (process.env.NODE_ENV !== 'production') {
       log('Parent: Destroying Postmate instance')
     }
     window.removeEventListener('message', this.listener, false)
-    this.frame.parentNode.removeChild(this.frame)
+    if (this.createIframeByMe)
+      this.frame.parentNode.removeChild(this.frame)
   }
 }
 
+
 /**
  * Composes an API to be used by the child
  * @param {Object} info Information on the consumer
  */
 export class ChildAPI {
-  constructor (info) {
+  constructor(info) {
     this.model = info.model
     this.parent = info.parent
     this.parentOrigin = info.parentOrigin
@@ -202,13 +211,14 @@ export class ChildAPI {
 
       if (e.data.postmate === 'call') {
         if (property in this.model && typeof this.model[property] === 'function') {
-          this.model[property](data)
+          // this.model[property](data)
+          this.model[property].apply(this, data)
         }
         return
       }
 
       // Reply to Parent
-      resolveValue(this.model, property)
+      resolveValue(this.model, property, data)
         .then(value => e.source.postMessage({
           property,
           postmate: 'reply',
@@ -219,7 +229,7 @@ export class ChildAPI {
     })
   }
 
-  emit (name, data) {
+  emit(name, data) {
     if (process.env.NODE_ENV !== 'production') {
       log(`Child: Emitting Event "${name}"`, data)
     }
@@ -255,18 +265,29 @@ class Postmate {
    * @param {Object} object The element to inject the frame into, and the url
    * @return {Promise}
    */
-  constructor ({
+  constructor({
     container = typeof container !== 'undefined' ? container : document.body, // eslint-disable-line no-use-before-define
     model,
     url,
     name,
     classListArray = [],
+    iframeOrSelector = undefined,
   }) { // eslint-disable-line no-undef
     this.parent = window
-    this.frame = document.createElement('iframe')
+    if (iframeOrSelector) {
+      if (typeof iframeOrSelector === 'string')
+        this.frame = document.querySelector(iframeOrSelector)
+      else
+        this.frame = iframeOrSelector
+    }
+    else {
+      this.frame = document.createElement('iframe')
+      this.createIframeByMe = true
+    }
     this.frame.name = name || ''
     this.frame.classList.add.apply(this.frame.classList, classListArray)
-    container.appendChild(this.frame)
+    if (this.createIframeByMe)
+      container.appendChild(this.frame)
     this.child = this.frame.contentWindow || this.frame.contentDocument.parentWindow
     this.model = model || {}
 
@@ -278,8 +299,8 @@ class Postmate {
    * @param  {String} url The URL to send a handshake request to
    * @return {Promise}     Promise that resolves when the handshake is complete
    */
-  sendHandshake (url) {
-    const childOrigin = resolveOrigin(url)
+  sendHandshake(url) {
+    let childOrigin = ""
     let attempt = 0
     let responseInterval
     return new Postmate.Promise((resolve, reject) => {
@@ -310,6 +331,11 @@ class Postmate {
 
       const doSend = () => {
         attempt++
+
+        if (attempt > maxHandshakeRequests) {
+          clearInterval(responseInterval)
+        }
+
         if (process.env.NODE_ENV !== 'production') {
           log(`Parent: Sending handshake attempt ${attempt}`, { childOrigin })
         }
@@ -318,13 +344,12 @@ class Postmate {
           type: messageType,
           model: this.model,
         }, childOrigin)
-
-        if (attempt === maxHandshakeRequests) {
-          clearInterval(responseInterval)
-        }
       }
 
       const loaded = () => {
+        // reset attempt to zero,and resolve origin
+        attempt = 0
+        childOrigin = resolveOrigin(url ? url : this.frame.src)
         doSend()
         responseInterval = setInterval(doSend, 500)
       }
@@ -332,13 +357,16 @@ class Postmate {
       if (this.frame.attachEvent) {
         this.frame.attachEvent('onload', loaded)
       } else {
-        this.frame.onload = loaded
+        this.frame.addEventListener('load', loaded)
       }
 
       if (process.env.NODE_ENV !== 'production') {
         log('Parent: Loading frame', { url })
       }
-      this.frame.src = url
+      if (url)
+        this.frame.src = url
+      else
+        loaded()
     })
   }
 }
@@ -353,7 +381,7 @@ Postmate.Model = class Model {
    * @param {Object} model Hash of values, functions, or promises
    * @return {Promise}       The Promise that resolves when the handshake has been received
    */
-  constructor (model) {
+  constructor(model) {
     this.child = window
     this.model = model
     this.parent = this.child.parent
@@ -364,7 +392,7 @@ Postmate.Model = class Model {
    * Responds to a handshake initiated by the Parent
    * @return {Promise} Resolves an object that exposes an API for the Child
    */
-  sendHandshakeReply () {
+  sendHandshakeReply() {
     return new Postmate.Promise((resolve, reject) => {
       const shake = (e) => {
         if (!e.data.postmate) {
